DepartmentProfile
EmployeeProfile
SalaryTierProfile

ISalaryTierRepository
IDepartmentRepository



=============

DepartmentForUpdate
DepartmentForAdd
DepartmentForPreview

EmployeeForUpdate
EmployeeForAdd
EmployeeForPreview

SalaryTierForUpdate
SalaryTierForAdd
SalaryTierForPreview

=============


Department
SalaryTier
Employee
=============

·≈÷«›… ﬁ”„ ÃœÌœ (Department):



{
    "DepartmentName": "Marketing",
    "IsActive": true
}
·≈÷«›… „” ÊÏ —« » ÃœÌœ (SalaryTier):



{
    "TierName": "Lead",
    "SalaryAmount": 9000,
    "IsActive": true
}
·≈÷«›… „ÊŸ› ÃœÌœ (Employee):



{
    "Name": "Eve Adams",
    "Position": "Marketing Specialist",
    "IsActive": true,
    "DepartmentId": 4,      // Assuming 4 is the ID of the newly added Marketing department
    "SalaryTierId": 2       // Mid-Level salary tier
}
»Ì«‰«  «· ⁄œÌ· (PUT)
· ÕœÌÀ ﬁ”„ „ÊÃÊœ (Department):



{
    "DepartmentId": 1,
    "DepartmentName": "Human Resources",
    "IsActive": true
}
· ÕœÌÀ „” ÊÏ —« » „ÊÃÊœ (SalaryTier):



{
    "SalaryTierId": 2,
    "TierName": "Intermediate",
    "SalaryAmount": 5200,
    "IsActive": true
}
· ÕœÌÀ »Ì«‰«  „ÊŸ› (Employee):



{
    "EmployeeId": 2,
    "Name": "Bob Johnson",
    "Position": "Software Engineer",
    "IsActive": true,
    "DepartmentId": 2,
    "SalaryTierId": 2
}


==========================

==========================
 p@ssw0rd123!
==========================
 [HttpGet("Get-All")]
        public async Task<ActionResult<IEnumerable<EmployeeForPreview>>> GetAllEmployees()
        {
            try
            {
                var employees = await _employeeRepository.GetAllEmployeesAsync();

                if (employees == null || !employees.Any())
                {
                    _logger.LogWarning("No employees found.");
                    return NotFound("No employees found.");
                }

                var employeeDtos = _mapper.Map<IEnumerable<EmployeeForPreview>>(employees);
                return Ok(employeeDtos);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while getting employees.");
                return StatusCode(500, "Internal server error.");
            }
        }

           [HttpGet("Get-All")]
        public async Task<ActionResult<IEnumerable<DepartmentForPreview>>> GetAllDepartments()
        {
            try
            {
                var departments = await _departmentRepository.GetAllDepartmentsAsync();

                if (departments == null || !departments.Any())
                {
                    _logger.LogWarning("No departments found.");
                    return NotFound("No departments found.");
                }

                var departmentDtos = _mapper.Map<IEnumerable<DepartmentForPreview>>(departments);
                return Ok(departmentDtos);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while getting departments.");
                return StatusCode(500, "Internal server error.");
            }
        }
          [HttpGet("Get-All")]
        public async Task<ActionResult<IEnumerable<SalaryTierForPreview>>> GetAllSalaryTiers()
        {
            try
            {
                var salaryTiers = await _salaryTierRepository.GetAllSalaryTiersAsync();

                if (salaryTiers == null || !salaryTiers.Any())
                {
                    _logger.LogWarning("No salary tiers found.");
                    return NotFound("No salary tiers found.");
                }

                var salaryTierDtos = _mapper.Map<IEnumerable<SalaryTierForPreview>>(salaryTiers);
                return Ok(salaryTierDtos);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while getting salary tiers.");
                return StatusCode(500, "Internal server error.");
            }
        }